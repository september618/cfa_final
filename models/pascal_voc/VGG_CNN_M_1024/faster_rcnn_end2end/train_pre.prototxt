name: "VGG_CNN_M_1024"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'im_info'
  top: 'gt_boxes'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 21"
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 7
    stride: 2
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 5
    stride: 2
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}



layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}

#========= RPN ============

layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5"
  top: "rpn/output"
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  convolution_param {
    num_output: 256
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
}
layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_cls_score"
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  convolution_param {
    num_output: 18   # 2(bg/fg) * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_bbox_pred"
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  convolution_param {
    num_output: 36   # 4 * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

layer {
  name: 'rpn-data'
  type: 'Python'
  bottom: 'rpn_cls_score'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'data'
  top: 'rpn_labels'
  top: 'rpn_bbox_targets'
  top: 'rpn_bbox_inside_weights'
  top: 'rpn_bbox_outside_weights'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "'feat_stride': 16"
  }
}

layer {
  name: "rpn_loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape"
  bottom: "rpn_labels"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_cls_loss"
  loss_weight: 0
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

layer {
  name: "rpn_loss_bbox"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred"
  bottom: "rpn_bbox_targets"
  bottom: 'rpn_bbox_inside_weights'
  bottom: 'rpn_bbox_outside_weights'
  top: "rpn_loss_bbox"
  loss_weight: 0
  smooth_l1_loss_param { sigma: 3.0 }
}

#========= RoI Proposal ============

layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}

layer {
  name: 'rpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rpn_cls_prob'
  top: 'rpn_cls_prob_reshape'
  reshape_param { shape { dim: 0 dim: 18 dim: -1 dim: 0 } }
}

layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'rpn_bbox_pred'
  bottom: 'im_info'
  top: 'rpn_rois'
#  top: 'rpn_scores'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "'feat_stride': 16"
  }
}

#layer {
#  name: 'debug-data'
#  type: 'Python'
#  bottom: 'data'
#  bottom: 'rpn_rois'
#  bottom: 'rpn_scores'
#  python_param {
#    module: 'rpn.debug_layer'
#    layer: 'RPNDebugLayer'
#  }
#}

layer {
  name: 'roi-data'
  type: 'Python'
  bottom: 'rpn_rois'
  bottom: 'gt_boxes'
  top: 'rois'
  top: 'labels'
  top: 'bbox_targets'
  top: 'bbox_inside_weights'
  top: 'bbox_outside_weights'
  python_param {
    module: 'rpn.proposal_target_layer'
    layer: 'ProposalTargetLayer'
    param_str: "'num_classes': 21"
  }
}

#========= RCNN ============
layer {
  name: "roi_pooling"
  type: "ROIPooling"
  bottom: "conv5"
  bottom: "rois"
  top: "pool5"
  roi_pooling_param {
    pooled_w: 6
    pooled_h: 6
    spatial_scale: 0.0625 # 1/16
  }
}

layer {
  name: "pool5_deconv"
  type: "Deconvolution"
  bottom: "pool5"
  top: "pool5_deconv"
  param{
    lr_mult: 0.0001
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 512
    kernel_size: 10
    pad: 1
    stride: 4
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}


layer {
  name: "pool5_pool"
  type:"Pooling"
  bottom: "pool5_deconv"
  top: "pool5_pool"
    pooling_param {
    kernel_size: 28
    stride: 28
    pad: 0
    pool: AVE
  }
}

layer {
  name: "cg1_"
  type: "InnerProduct"
  bottom: "pool5_pool"
  top: "cg1_"
  param{
    lr_mult: 0.0001
    decay_mult: 0
  }
  param{
    lr_mult: 0.0001
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cg2_"
  type: "InnerProduct"
  bottom: "pool5_pool"
  top: "cg2_"
  param{
    lr_mult: 0.0001
    decay_mult: 0
  }
  param{
    lr_mult: 0.0001
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cg3_"
  type: "InnerProduct"
  bottom: "pool5_pool"
  top: "cg3_"
  param{
    lr_mult: 0.0001
    decay_mult: 0
  }
  param{
    lr_mult: 0.0001
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "sig1"
  type: "Sigmoid"
  bottom: "cg1_"
  top: "sig1"
}
layer {
  name: "sig2"
  type: "Sigmoid"
  bottom: "cg2_"
  top: "sig2"
}
layer {
  name: "sig3"
  type: "Sigmoid"
  bottom: "cg3_"
  top: "sig3"
}

layer {
  name: "resig1"
  type: "Reshape"
  bottom: "sig1"
  top: "resig1"
  reshape_param{
    shape{
      dim:0
      dim:1
      dim:1
      dim:512
    }
  }
}
layer {
  name: "resig2"
  type: "Reshape"
  bottom: "sig2"
  top: "resig2"
  reshape_param{
    shape{
      dim:0
      dim:1
      dim:1
      dim:512
    }
  }
}
layer {
  name: "resig3"
  type: "Reshape"
  bottom: "sig3"
  top: "resig3"
  reshape_param{
    shape{
      dim:0
      dim:1
      dim:1
      dim:512
    }
  }
}


#####################################################################################################################################
##############input: 1*1*512 dim vector indicates weight for each of the 512 channels################################################
##############output: attention mask#################################################################################################
#####################################################################################################################################


layer {
  name: "reshape"
  type: "Reshape"
  bottom: "pool5_deconv"
  top: "reshape_conv"
  reshape_param{
    shape{
      dim:-1
      dim:784
      dim:1
      dim:512
    }
  }
}


layer {
  name: "up_1"
  type: "Deconvolution"
  bottom: "resig1"
  top: "up_1"
  param{
    lr_mult: 0.0001
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 784
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}
layer {
  name: "mask1_1"
  type: "Eltwise"
  bottom: "reshape_conv"
  bottom: "up_1"
  top: "mask1_1"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "mask_1_1"
  type: "Pooling"
  bottom: "mask1_1"
  top: "mask_1_1"
  pooling_param {
    pool: AVE
    kernel_h: 1
    kernel_w: 512
    stride: 1
  }
}
layer {
  name: "softmax1"
  type: "Softmax"
  bottom: "mask_1_1"
  top: "mask_1_4"
}


layer {
    name: "repeat1"
    type: "Tile"
    bottom: "mask_1_4"
    top: "mask_1_4_repeat"
    tile_param {
    axis: 3 # you want to "repmat" along the first axis
    tiles: 512 # you want 64 repetitions
    }
}

layer {
  name: "part1"
  type: "Eltwise"
  bottom: "mask_1_4_repeat"
  bottom: "reshape_conv"
  top: "part1"
  eltwise_param{
    operation: PROD
  }
}


layer {
  name: "reshape_part1"
  type: "Reshape"
  bottom: "part1"
  top: "part1_reshape"
  reshape_param{
    shape{
      dim:-1
      dim:512
      dim:28
      dim:28    }
  }
}
#layer{
#  name:"reshape"
#  type:"Reshape"
#  bottom:"mask_1_4"
#  top:"mask_1_4_dis"
#    reshape_param{
#    shape{
#      dim:-1
#    }
#}}


layer {
  name: "up_2"
  type: "Deconvolution"
  bottom: "resig2"
  top: "up_2"
  param{
    lr_mult: 0.0001
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 784
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}
layer {
  name: "mask2_1"
  type: "Eltwise"
  bottom: "reshape_conv"
  bottom: "up_2"
  top: "mask2_1"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "mask_2_1"
  type: "Pooling"
  bottom: "mask2_1"
  top: "mask_2_1"
  pooling_param {
    pool: AVE
    kernel_h: 1
    kernel_w: 512
    stride: 1
  }
}

layer {
  name: "softmax2"
  type: "Softmax"
  bottom: "mask_2_1"
  top: "mask_2_4"
}
layer {
    name: "repeat2"
    type: "Tile"
    bottom: "mask_2_4"
    top: "mask_2_4_repeat"
    tile_param {
    axis: 3 # you want to "repmat" along the first axis
    tiles: 512 # you want 64 repetitions
    }
}
layer {
  name: "part2"
  type: "Eltwise"
  bottom: "mask_2_4_repeat"
  bottom: "reshape_conv"
  top: "part2"
  eltwise_param{
    operation: PROD
  }
}

layer {
  name: "reshape_part2"
  type: "Reshape"
  bottom: "part2"
  top: "part2_reshape"
  reshape_param{
    shape{
      dim:-1
      dim:512
      dim:28
      dim:28    }
  }
}

#layer{
#  name:"reshape"
#  type:"Reshape"
#  bottom:"mask_2_4"
#  top:"mask_2_4_dis"
#    reshape_param{
#    shape{
#      dim:-1
#    }
#}}




layer {
  name: "up_3"
  type: "Deconvolution"
  bottom: "resig3"
  top: "up_3"
  param{
    lr_mult: 0.0001
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 784
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}
layer {
  name: "mask3_1"
  type: "Eltwise"
  bottom: "reshape_conv"
  bottom: "up_3"
  top: "mask3_1"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "mask_3_1"
  type: "Pooling"
  bottom: "mask3_1"
  top: "mask_3_1"
  pooling_param {
    pool: AVE
    kernel_h: 1
    kernel_w: 512
    stride: 1
  }
}
layer {
  name: "softmax3"
  type: "Softmax"
  bottom: "mask_3_1"
  top: "mask_3_4"
}

layer {
    name: "repeat3"
    type: "Tile"
    bottom: "mask_3_4"
    top: "mask_3_4_repeat"
    tile_param {
    axis: 3 # you want to "repmat" along the first axis
    tiles: 512 # you want 64 repetitions
    }
}
layer {
  name: "part3"
  type: "Eltwise"
  bottom: "mask_3_4_repeat"
  bottom: "reshape_conv"
  top: "part3"
  eltwise_param{
    operation: PROD
  }
}

layer {
  name: "reshape_part3"
  type: "Reshape"
  bottom: "part3"
  top: "part3_reshape"
  reshape_param{
    shape{
      dim:-1
      dim:512
      dim:28
      dim:28    }
  }
}
#layer{
#  name:"reshape"
#  type:"Reshape"
#  bottom:"mask_3_4"
#  top:"mask_3_4_dis"
#    reshape_param{
#    shape{
#      dim:-1
#    }
#    }
#    }



#newly added--zsa
layer {
  name: "concat_3+1_parts"
  type: "Concat"
  bottom: "pool5_deconv"
  bottom: "part1_reshape"
  bottom: "part2_reshape"
  bottom: "part3_reshape"
  top: "concat"
}

layer {
  name: "final_fc"
  type: "InnerProduct"
  bottom: "concat"
  top: "cls_score"
  param{
    lr_mult: 0.0001
    decay_mult: 1
  }
  param{
    lr_mult: 0.0002
    decay_mult: 0
  }
  inner_product_param {
    num_output: 21
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score"
  bottom: "labels"
  top: "loss_cls"
  propagate_down: 1
  propagate_down: 0
  loss_weight: 1
}

#geometry-aware loss
#layer{
#  name: "geo_loss"
#  type: "Python"
#  bottom: "part1_reshape"
#  bottom: "part2_reshape"
#  bottom: "part3_reshape"
#  bottom: "part1_ave"
#  bottom: "part2_ave"
#  bottom: "part3_ave"
#  propagate_down:1
#  propagate_down:1
#  propagate_down:1
#  propagate_down:0
#  propagate_down:0
#  propagate_down:0
#  top: "geo_loss_part1"
#  top: "geo_loss_part2"
#  top: "geo_loss_part3"
#  top: "part1_ave"
#  top: "part2_ave"
#  top: "part3_ave"
#  python_param {
#    module: 'rpn.cls_aware'
#    layer: 'AwareLossLayer'
#  }
#}




#layer {
#  type: 'Python'
#  name: 'create_labels_part1'
#  bottom: "mask_1_4_softmax"
#  top: "one_hot_labels_part1"
#  python_param {
#    module: 'rpn.create_onehot_label'
#    layer: 'CreatLabelLayer'
#  }
#
#}
#layer {
#  name: "dis_loss_part1"
#  type: "SoftmaxWithLoss"
#  bottom: "mask_1_4_dis"
#  bottom: "one_hot_labels_part1"
#  propagate_down: 1
#  propagate_down: 0
#  top: "dis_loss_1"
#  loss_weight: 1
#}


#layer {
#  type: 'Python'
#  name: 'create_labels_part2'
#  bottom: "mask_2_4_softmax"
#  top: "one_hot_labels_part2"
#  python_param {
#    module: 'rpn.create_onehot_label'
#    layer: 'CreatLabelLayer'
#  }
#
#}
#layer {
#  name: "dis_loss_part2"
#  type: "SoftmaxWithLoss"
#  bottom: "mask_2_4_dis"
#  bottom: "one_hot_labels_part2"
#  propagate_down: 1
#  propagate_down: 0
#  top: "dis_loss_2"
#  loss_weight: 1
#}

#layer {
#  type: 'Python'
#  name: 'create_labels_part3'
#  bottom: "mask_3_4_softmax"
#  top: "one_hot_labels_part3"
#  python_param {
#    module: 'rpn.create_onehot_label'
#    layer: 'CreatLabelLayer'
#  }
#
#}
#layer {
#  name: "dis_loss_part3"
#  type: "SoftmaxWithLoss"
#  bottom: "mask_3_4_dis"
#  bottom: "one_hot_labels_part3"
#  propagate_down: 1
#  propagate_down: 0
#  top: "dis_loss_3"
#  loss_weight: 1
#}

layer {
  type: 'Python'
  name: 'div_loss'
  top: 'div_loss'
  bottom: "mask_1_4"
  bottom: "mask_2_4"
  bottom: "mask_3_4"
  python_param {
    module: 'rpn.pyloss'
    layer: 'DivLossLayer'
  }
  loss_weight: 1
}

layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  inner_product_param {
    num_output: 1024
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
#layer {
#  name: "cls_score"
#  type: "InnerProduct"
#  bottom: "fc7"
#  top: "cls_score"
#  param { lr_mult: 1 }
#  param { lr_mult: 2 }
#  inner_product_param {
#    num_output: 21
#    weight_filler {
#      type: "gaussian"
#      std: 0.01
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  inner_product_param {
    num_output: 84
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
#layer {
#  name: "loss_cls"
#  type: "SoftmaxWithLoss"
#  bottom: "cls_score"
#  bottom: "labels"
#  propagate_down: 1
#  propagate_down: 0
#  top: "loss_cls"
#  loss_weight: 1
#}
layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  loss_weight: 0
}