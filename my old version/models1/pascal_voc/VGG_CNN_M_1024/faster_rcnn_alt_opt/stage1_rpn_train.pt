name: "VGG_CNN_M_1024"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'im_info'
  top: 'gt_boxes'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 21"
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  convolution_param {
    num_output: 96
    kernel_size: 7 stride: 2
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3 stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 256
    pad: 1 kernel_size: 5 stride: 2
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3 stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 512
    pad: 1 kernel_size: 3
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 512
    pad: 1 kernel_size: 3
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param { lr_mult: 1 }
  param { lr_mult: 2 }
  convolution_param {
    num_output: 512
    pad: 1 kernel_size: 3
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}

#========= RPN ============

layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5"
  top: "rpn/output"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 256
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
}
layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_cls_score"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 18   # 2(bg/fg) * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_bbox_pred"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 36   # 4 * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}
layer {
  name: 'rpn-data'
  type: 'Python'
  bottom: 'rpn_cls_score'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'data'
  top: 'rpn_labels'
  top: 'rpn_bbox_targets'
  top: 'rpn_bbox_inside_weights'
  top: 'rpn_bbox_outside_weights'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "'feat_stride': 16"
  }
}
layer {
  name: "rpn_loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape"
  bottom: "rpn_labels"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_cls_loss"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}
layer {
  name: "rpn_loss_bbox"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred"
  bottom: "rpn_bbox_targets"
  bottom: 'rpn_bbox_inside_weights'
  bottom: 'rpn_bbox_outside_weights'
  top: "rpn_loss_bbox"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }
}

#========= RCNN ============

layer {
  name: "dummy_roi_pool_conv5"
  type: "DummyData"
  top: "dummy_roi_pool_conv5"
  dummy_data_param {
    shape { dim: 1 dim: 512 dim:28 dim:28 }
    data_filler { type: "gaussian" std: 0.01 }
  }
}


layer {
  name: "conv5_4_relu5_4_0_split"
  type: "Split"
  bottom: "dummy_roi_pool_conv5"
  top: "conv5_4_relu5_4_0_split_0"
  top: "conv5_4_relu5_4_0_split_1"
  top: "conv5_4_relu5_4_0_split_2"
  top: "conv5_4_relu5_4_0_split_3"
  top: "conv5_4_relu5_4_0_split_4"
  top: "conv5_4_relu5_4_0_split_5"
}

layer {
  name: "pool5_pool5_0_split"
  type: "Split"
  bottom: "dummy_roi_pool_conv5"
  top: "pool5_pool5_0_split_0"
  top: "pool5_pool5_0_split_1"
  top: "pool5_pool5_0_split_2"
  top: "pool5_pool5_0_split_3"
}
#zsaï¼šcoped from macnn
layer {
  name: "cg1_"
  type: "InnerProduct"
  bottom: "pool5_pool5_0_split_0"
  top: "cg1_"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  param{
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cg2_"
  type: "InnerProduct"
  bottom: "pool5_pool5_0_split_1"
  top: "cg2_"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  param{
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cg3_"
  type: "InnerProduct"
  bottom: "pool5_pool5_0_split_2"
  top: "cg3_"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  param{
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cg4_"
  type: "InnerProduct"
  bottom: "pool5_pool5_0_split_3"
  top: "cg4_"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  param{
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "t1"
  type: "TanH"
  bottom: "cg1_"
  top: "cg1_1"
}
layer {
  name: "t2"
  type: "TanH"
  bottom: "cg2_"
  top: "cg2_1"
}
layer {
  name: "t3"
  type: "TanH"
  bottom: "cg3_"
  top: "cg3_1"
}
layer {
  name: "t4"
  type: "TanH"
  bottom: "cg4_"
  top: "cg4_1"
}
layer {
  name: "cg1"
  type: "InnerProduct"
  bottom: "cg1_1"
  top: "cg1"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  param{
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cg2"
  type: "InnerProduct"
  bottom: "cg2_1"
  top: "cg2"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  param{
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cg3"
  type: "InnerProduct"
  bottom: "cg3_1"
  top: "cg3"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  param{
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cg4"
  type: "InnerProduct"
  bottom: "cg4_1"
  top: "cg4"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  param{
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "sig1"
  type: "Sigmoid"
  bottom: "cg1"
  top: "sig1"
}
layer {
  name: "sig2"
  type: "Sigmoid"
  bottom: "cg2"
  top: "sig2"
}
layer {
  name: "sig3"
  type: "Sigmoid"
  bottom: "cg3"
  top: "sig3"
}
layer {
  name: "sig4"
  type: "Sigmoid"
  bottom: "cg4"
  top: "sig4"
}
layer {
  name: "resig1"
  type: "Reshape"
  bottom: "sig1"
  top: "resig1"
  reshape_param{
    shape{
      dim:0
      dim:1
      dim:1
      dim:512
    }
  }
}
layer {
  name: "resig2"
  type: "Reshape"
  bottom: "sig2"
  top: "resig2"
  reshape_param{
    shape{
      dim:0
      dim:1
      dim:1
      dim:512
    }
  }
}
layer {
  name: "resig3"
  type: "Reshape"
  bottom: "sig3"
  top: "resig3"
  reshape_param{
    shape{
      dim:0
      dim:1
      dim:1
      dim:512
    }
  }
}
layer {
  name: "resig4"
  type: "Reshape"
  bottom: "sig4"
  top: "resig4"
  reshape_param{
    shape{
      dim:0
      dim:1
      dim:1
      dim:512
    }
  }
}

#####################################################################################################################################
##############input: 1*1*512 dim vector indicates weight for each of the 512 channels################################################
##############output: attention mask#################################################################################################
#####################################################################################################################################


layer {
  name: "reshape"
  type: "Reshape"
  bottom: "conv5_4_relu5_4_0_split_1"
  top: "reshape_conv"
  reshape_param{
    shape{
      dim:-1
      dim:784
      dim:1
      dim:512
    }
  }
}

layer {
  name: "transpose_conv_transpose_0_split"
  type: "Split"
  bottom: "reshape_conv"
  top: "transpose_conv_transpose_0_split_0"
  top: "transpose_conv_transpose_0_split_1"
  top: "transpose_conv_transpose_0_split_2"
  top: "transpose_conv_transpose_0_split_3"
}
layer {
  name: "up_1"
  type: "Deconvolution"
  bottom: "resig1"
  top: "up_1"
  param{
    lr_mult: 0.0
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 784
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}
layer {
  name: "mask1_1"
  type: "Eltwise"
  bottom: "transpose_conv_transpose_0_split_0"
  bottom: "up_1"
  top: "mask1_1"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "mask_1_1"
  type: "Pooling"
  bottom: "mask1_1"
  top: "mask_1_1"
  pooling_param {
    pool: AVE
    kernel_h: 1
    kernel_w: 512
    stride: 1
  }
}
layer {
  name: "mask1_s"
  type: "Power"
  bottom: "mask_1_1"
  top: "mask1_s"
  power_param {
      power: 1
      scale: 0.1
      shift: 0
    }
}
layer {
  name: "mask1_4"
  type: "TanH"
  bottom: "mask1_s"
  top: "mask_1_4"
}
layer {
  name: "mask_1_0"
  type: "BNLL"
  bottom: "mask_1_4"
  top: "mask_1_0"
}

layer {
  name: "mask1_t"
  type: "Power"
  bottom: "mask_1_0"
  top: "mask1_t"
  power_param {
      power: 1
      scale: 4
      shift: 0
    }
}
layer {
  name: "mask1_4"
  type: "Softmax"
  bottom: "mask1_t"
  top: "mask1_4"
}
layer {
  name: "mask_1_4_"
  type: "Power"
  bottom: "mask1_4"
  top: "mask_1_4_"
  power_param{
    power: 1
    scale: 100
    shift: 0
  }
}
layer {
  name: "mask_1_4__mask_1_4__0_split"
  type: "Split"
  bottom: "mask_1_4_"
  top: "mask_1_4__mask_1_4__0_split_0"
  top: "mask_1_4__mask_1_4__0_split_1"
}
layer {
  name: "mask1_2"
  type: "Reshape"
  bottom: "mask_1_4__mask_1_4__0_split_0"
  top: "mask1_2"
  reshape_param{
    shape{
      dim:-1
      dim:1
      dim:28
      dim:28
    }
  }
}
layer {
  name: "up1"
  type: "Deconvolution"
  bottom: "mask1_2"
  top: "up1"
  param{
    lr_mult: 0.0
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 512
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}
layer {
  name: "mask1_3"
  type: "Eltwise"
  bottom: "conv5_4_relu5_4_0_split_2"
  bottom: "up1"
  top: "mask1_3"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "mask_1_5"
  type: "Pooling"
  bottom: "mask1_3"
  top: "mask_1_5"
  pooling_param {
    kernel_size: 28
    stride: 28
    pad: 0
    pool: AVE
  }
}
layer {
  name: "mask1_5"
  type: "Power"
  bottom: "mask_1_5"
  top: "mask1_5"
}
layer {
  name: "my_fc1"
  type: "InnerProduct"
  bottom: "mask1_5"
  top: "fc1"
  param{
    lr_mult: 0.0
    decay_mult: 0.0
  }
  param{
    lr_mult: 0.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 30
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "softmax1_silence"
  type: "Silence"
  bottom: "fc1"
  #loss_weight: 0.10000000149
}
layer {
  name: "up_2"
  type: "Deconvolution"
  bottom: "resig2"
  top: "up_2"
  param{
    lr_mult: 0.0
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 784
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}
layer {
  name: "mask2_1"
  type: "Eltwise"
  bottom: "transpose_conv_transpose_0_split_1"
  bottom: "up_2"
  top: "mask2_1"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "mask_2_1"
  type: "Pooling"
  bottom: "mask2_1"
  top: "mask_2_1"
  pooling_param {
    pool: AVE
    kernel_h: 1
    kernel_w: 512
    stride: 1
  }
}
layer {
  name: "mask2_s"
  type: "Power"
  bottom: "mask_2_1"
  top: "mask2_s"
  power_param{
    power: 1
    scale: 0.1
    shift: 0
  }
}
layer {
  name: "mask2_4"
  type: "TanH"
  bottom: "mask2_s"
  top: "mask_2_4"
}
layer {
  name: "mask_2_0"
  type: "BNLL"
  bottom: "mask_2_4"
  top: "mask_2_0"
}

layer {
  name: "mask2_t"
  type: "Power"
  bottom: "mask_2_0"
  top: "mask2_t"
  power_param {
    power: 1
    scale: 4
    shift: 0
  }
}
layer {
  name: "mask2_4"
  type: "Softmax"
  bottom: "mask2_t"
  top: "mask2_4"
}
layer {
  name: "mask_2_4_"
  type: "Power"
  bottom: "mask2_4"
  top: "mask_2_4_"
  power_param{
    scale: 100
  }
}
layer {
  name: "mask_2_4__mask_2_4__0_split"
  type: "Split"
  bottom: "mask_2_4_"
  top: "mask_2_4__mask_2_4__0_split_0"
  top: "mask_2_4__mask_2_4__0_split_1"
}
layer {
  name: "mask2_2"
  type: "Reshape"
  bottom: "mask_2_4__mask_2_4__0_split_0"
  top: "mask2_2"
  reshape_param{
    shape{
      dim:-1
      dim:1
      dim:28
      dim:28
    }
  }
}
layer {
  name: "up2"
  type: "Deconvolution"
  bottom: "mask2_2"
  top: "up2"
  param{
    lr_mult: 0.0
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 512
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}
layer {
  name: "mask2_3"
  type: "Eltwise"
  bottom: "conv5_4_relu5_4_0_split_3"
  bottom: "up2"
  top: "mask2_3"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "mask_2_5"
  type: "Pooling"
  bottom: "mask2_3"
  top: "mask_2_5"
  pooling_param {
    kernel_size: 28
    stride: 28
    pad: 0
    pool: AVE
  }
}
layer {
  name: "mask2_5"
  type: "Power"
  bottom: "mask_2_5"
  top: "mask2_5"
}
layer {
  name: "my_fc2"
  type: "InnerProduct"
  bottom: "mask2_5"
  top: "fc2"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  param{
    lr_mult: 0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 30
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "softmax2_silence"
  type: "Silence"
  bottom: "fc2"
  #loss_weight: 0.10000000149
}
layer {
  name: "up_3"
  type: "Deconvolution"
  bottom: "resig3"
  top: "up_3"
  param{
    lr_mult: 0.0
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 784
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}
layer {
  name: "mask3_1"
  type: "Eltwise"
  bottom: "transpose_conv_transpose_0_split_2"
  bottom: "up_3"
  top: "mask3_1"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "mask_3_1"
  type: "Pooling"
  bottom: "mask3_1"
  top: "mask_3_1"
  pooling_param {
    pool: AVE
    kernel_h: 1
    kernel_w: 512
    stride: 1
  }
}
layer {
  name: "mask3_s"
  type: "Power"
  bottom: "mask_3_1"
  top: "mask3_s"
  power_param{
    power: 1
    scale: 0.1
    shift: 0
  }
}
layer {
  name: "mask3_4"
  type: "TanH"
  bottom: "mask3_s"
  top: "mask_3_4"
}
layer {
  name: "mask_3_0"
  type: "BNLL"
  bottom: "mask_3_4"
  top: "mask_3_0"
}

layer {
  name: "mask3_t"
  type: "Power"
  bottom: "mask_3_0"
  top: "mask3_t"
  power_param{
    power: 1
    scale: 4
    shift: 0
  }
}
layer {
  name: "mask3_4"
  type: "Softmax"
  bottom: "mask3_t"
  top: "mask3_4"
}
layer {
  name: "mask_3_4_"
  type: "Power"
  bottom: "mask3_4"
  top: "mask_3_4_"
  power_param{
    power: 1
    scale: 100
    shift: 0
  }
}
layer {
  name: "mask_3_4__mask_3_4__0_split"
  type: "Split"
  bottom: "mask_3_4_"
  top: "mask_3_4__mask_3_4__0_split_0"
  top: "mask_3_4__mask_3_4__0_split_1"
}
layer {
  name: "mask3_2"
  type: "Reshape"
  bottom: "mask_3_4__mask_3_4__0_split_0"
  top: "mask3_2"
  reshape_param{
    shape{
      dim:-1
      dim:1
      dim:28
      dim:28
    }
  }
}
layer {
  name: "up3"
  type: "Deconvolution"
  bottom: "mask3_2"
  top: "up3"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}
layer {
  name: "mask3_3"
  type: "Eltwise"
  bottom: "conv5_4_relu5_4_0_split_4"
  bottom: "up3"
  top: "mask3_3"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "mask_3_5"
  type: "Pooling"
  bottom: "mask3_3"
  top: "mask_3_5"
  pooling_param {
    kernel_size: 28
    stride: 28
    pad: 0
    pool: AVE
  }
}
layer {
  name: "mask3_5"
  type: "Power"
  bottom: "mask_3_5"
  top: "mask3_5"
}
layer {
  name: "my_fc3"
  type: "InnerProduct"
  bottom: "mask3_5"
  top: "fc3"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  param{
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 30
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "softmax3_silence"
  type: "Silence"
  bottom: "fc3"
  #loss_weight: 0.10000000149
}
layer {
  name: "up_4"
  type: "Deconvolution"
  bottom: "resig4"
  top: "up_4"
  param{
    lr_mult: 0.0
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 784
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}
layer {
  name: "mask4_1"
  type: "Eltwise"
  bottom: "transpose_conv_transpose_0_split_3"
  bottom: "up_4"
  top: "mask4_1"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "mask_4_1"
  type: "Pooling"
  bottom: "mask4_1"
  top: "mask_4_1"
  pooling_param {
    kernel_h: 1
    kernel_w: 512
    stride: 1
  }
}
layer {
  name: "mask4_s"
  type: "Power"
  bottom: "mask_4_1"
  top: "mask4_s"
  power_param{
    power: 1
    scale: 0.1
    shift: 0
  }
}
layer {
  name: "mask4_4"
  type: "TanH"
  bottom: "mask4_s"
  top: "mask_4_4"
}
layer {
  name: "mask_4_0"
  type: "BNLL"
  bottom: "mask_4_4"
  top: "mask_4_0"
}

layer {
  name: "mask4_t"
  type: "Power"
  bottom: "mask_4_0"
  top: "mask4_t"
  power_param{
    power: 1
    scale: 4
    shift: 0
  }
}
layer {
  name: "mask4_4"
  type: "Softmax"
  bottom: "mask4_t"
  top: "mask4_4"
}
layer {
  name: "mask_4_4_"
  type: "Power"
  bottom: "mask4_4"
  top: "mask_4_4_"
  power_param{
    power: 1
    scale: 100
    shift: 0
  }
}
layer {
  name: "mask_4_4__mask_4_4__0_split"
  type: "Split"
  bottom: "mask_4_4_"
  top: "mask_4_4__mask_4_4__0_split_0"
  top: "mask_4_4__mask_4_4__0_split_1"
}
layer {
  name: "mask4_2"
  type: "Reshape"
  bottom: "mask_4_4__mask_4_4__0_split_0"
  top: "mask4_2"
  reshape_param{
    shape{
      dim:-1
      dim:1
      dim:28
      dim:28
    }
  }
}
layer {
  name: "up4"
  type: "Deconvolution"
  bottom: "mask4_2"
  top: "up4"
  param{
    lr_mult: 0.0
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 512
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      type: "bilinear"
    }
    bias_term: false
  }
}
layer {
  name: "mask4_3"
  type: "Eltwise"
  bottom: "conv5_4_relu5_4_0_split_5"
  bottom: "up4"
  top: "mask4_3"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "mask_4_5"
  type: "Pooling"
  bottom: "mask4_3"
  top: "mask_4_5"
  pooling_param {
    kernel_size: 28
    stride: 28
    pad: 0
    pool: AVE
  }
}
layer {
  name: "mask4_5"
  type: "Power"
  bottom: "mask_4_5"
  top: "mask4_5"
}
layer {
  name: "my_fc4"
  type: "InnerProduct"
  bottom: "mask4_5"
  top: "fc4"
  param{
    lr_mult: 0
    decay_mult: 0
  }
  param{
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 30
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "softmax4_silence"
  type: "Silence"
  bottom: "fc4"
  #loss_weight: 0.10000000149
}



layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "dummy_roi_pool_conv5"
  top: "fc6"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  inner_product_param {
    num_output: 1024
  }
}
layer {
  name: "silence_fc7"
  type: "Silence"
  bottom: "fc7"
}
